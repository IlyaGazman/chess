{"total":97,"passed":36,"failed":61}

failed: ChessModel - Board Initialization should return the board to the starting position after reset
❌ Expected Object({ type: 'pawn', color: 'white', moved: false }) to be null.
        at /tests/chess/model/board_initialization_tests.js:75:31)
    
❌ Expected null to equal Object({ type: 'pawn', color: 'white', moved: true }).
        at /tests/chess/model/board_initialization_tests.js:76:31)
    

failed: ChessModel - Piece Movement should handle pawn promotion correctly when reaching the opponent's back rank
❌ Expected false to be true.
        at /tests/chess/model/piece_movement_tests.js:248:38)
    
❌ Expected undefined to be 'queen'.
        at /tests/chess/model/piece_movement_tests.js:249:47)
    
❌ Expected undefined to be 'white'.
        at /tests/chess/model/piece_movement_tests.js:250:48)
    
❌ Expected Object({ type: 'pawn', color: 'white', moved: false }) to be null.
        at /tests/chess/model/piece_movement_tests.js:251:45)
    

failed: ChessModel - Piece Movement should allow rooks to move horizontally or vertically when the path is clear
❌ Expected false to be true.
        at /tests/chess/model/piece_movement_tests.js:104:38)
    
❌ Expected undefined to be 'rook'.
        at /tests/chess/model/piece_movement_tests.js:105:47)
    
❌ Expected Object({ type: 'rook', color: 'white', moved: false }) to be null.
        at /tests/chess/model/piece_movement_tests.js:106:45)
    
❌ Expected false to be true.
        at /tests/chess/model/piece_movement_tests.js:112:40)
    
❌ Expected undefined to be 'rook'.
        at /tests/chess/model/piece_movement_tests.js:113:49)
    

failed: ChessModel - Piece Movement should handle rook movement correctly during castling
❌ Expected undefined to be 'king'.
        at /tests/chess/model/piece_movement_tests.js:236:37)
    
❌ Expected undefined to be 'rook'.
        at /tests/chess/model/piece_movement_tests.js:237:37)
    
❌ Expected Object({ type: 'rook', color: 'white', moved: false }) to be null.
        at /tests/chess/model/piece_movement_tests.js:238:31)
    

failed: ChessModel - Piece Movement should allow pawns to capture diagonally one square forward
❌ Expected 'black' to be 'white'.
        at /tests/chess/model/piece_movement_tests.js:46:48)
    
❌ Expected Object({ type: 'pawn', color: 'white', moved: false }) to be null.
        at /tests/chess/model/piece_movement_tests.js:47:45)
    

failed: ChessModel - Piece Movement should allow queens to move diagonally, horizontally, or vertically when the path is clear
❌ Expected false to be true.
        at /tests/chess/model/piece_movement_tests.js:131:38)
    
❌ Expected undefined to be 'queen'.
        at /tests/chess/model/piece_movement_tests.js:132:47)
    
❌ Expected Object({ type: 'queen', color: 'white' }) to be null.
        at /tests/chess/model/piece_movement_tests.js:133:45)
    
❌ Expected false to be true.
        at /tests/chess/model/piece_movement_tests.js:139:40)
    
❌ Expected undefined to be 'queen'.
        at /tests/chess/model/piece_movement_tests.js:140:49)
    

failed: ChessModel - Piece Movement should allow knights to jump over other pieces
❌ Expected undefined to be 'knight'.
        at /tests/chess/model/piece_movement_tests.js:74:47)
    
❌ Expected Object({ type: 'knight', color: 'white' }) to be null.
        at /tests/chess/model/piece_movement_tests.js:75:45)
    

failed: ChessModel - Piece Movement should allow knights to move in an L-shape
❌ Expected undefined to be 'knight'.
        at /tests/chess/model/piece_movement_tests.js:65:47)
    
❌ Expected Object({ type: 'knight', color: 'white' }) to be null.
        at /tests/chess/model/piece_movement_tests.js:66:45)
    

failed: ChessModel - Piece Movement should handle en passant captures correctly
❌ Expected undefined to be 'pawn'.
        at /tests/chess/model/piece_movement_tests.js:275:47)
    
❌ Expected undefined to be 'white'.
        at /tests/chess/model/piece_movement_tests.js:276:48)
    
❌ Expected Object({ type: 'pawn', color: 'white', moved: false }) to be null.
        at /tests/chess/model/piece_movement_tests.js:277:45)
    
❌ Expected Object({ type: 'pawn', color: 'black', moved: true }) to be null.
        at /tests/chess/model/piece_movement_tests.js:278:31)
    
❌ Expected Object({ row: 2, col: 3 }) to be null.
        at /tests/chess/model/piece_movement_tests.js:279:35)
    

failed: ChessModel - Piece Movement should allow pawns to move one square forward when the destination is empty
❌ Expected undefined to be 'pawn'.
        at /tests/chess/model/piece_movement_tests.js:15:47)
    
❌ Expected Object({ type: 'pawn', color: 'white', moved: false }) to be null.
        at /tests/chess/model/piece_movement_tests.js:16:45)
    

failed: ChessModel - Piece Movement should allow kings to move one square in any direction
❌ Expected false to be true.
        at /tests/chess/model/piece_movement_tests.js:158:38)
    
❌ Expected 'pawn' to be 'king'.
        at /tests/chess/model/piece_movement_tests.js:159:47)
    
❌ Expected Object({ type: 'king', color: 'white', moved: false }) to be null.
        at /tests/chess/model/piece_movement_tests.js:160:45)
    

failed: ChessModel - Piece Movement should update the "moved" property correctly after a piece moves
❌ TypeError: Cannot read properties of null (reading 'moved'
    at /tests/chess/model/piece_movement_tests.js:205:30)
    

failed: ChessModel - Piece Movement should allow pawns to move two squares forward from their starting position
❌ Expected undefined to be 'pawn'.
        at /tests/chess/model/piece_movement_tests.js:23:47)
    
❌ Expected Object({ type: 'pawn', color: 'white', moved: false }) to be null.
        at /tests/chess/model/piece_movement_tests.js:24:45)
    
❌ Expected null to equal Object({ row: 5, col: 4 }).
        at /tests/chess/model/piece_movement_tests.js:25:35)
    

failed: ChessModel - Piece Movement should allow pieces to capture opponent pieces but not friendly pieces
❌ Expected 'black' to be 'white'.
        at /tests/chess/model/piece_movement_tests.js:193:38)
    

failed: ChessModel - Piece Movement should allow bishops to move diagonally when the path is clear
❌ Expected false to be true.
        at /tests/chess/model/piece_movement_tests.js:85:38)
    
❌ Expected undefined to be 'bishop'.
        at /tests/chess/model/piece_movement_tests.js:86:47)
    
❌ Expected Object({ type: 'bishop', color: 'white' }) to be null.
        at /tests/chess/model/piece_movement_tests.js:87:45)
    

failed: ChessModel - Special Moves should not allow castling when the king has moved
❌ Expected false to be true.
        at /tests/chess/model/special_moves_tests.js:62:38)
    

failed: ChessModel - Special Moves should not allow castling when the relevant rook has moved
❌ Expected false to be true.
        at /tests/chess/model/special_moves_tests.js:76:39)
    

failed: ChessModel - Special Moves should update castling rights correctly after king or rook movements
❌ Expected true to be false.
        at /tests/chess/model/special_moves_tests.js:267:49)
    
❌ Expected true to be false.
        at /tests/chess/model/special_moves_tests.js:268:50)
    
❌ Expected true to be false.
        at /tests/chess/model/special_moves_tests.js:274:49)
    
❌ Expected true to be false.
        at /tests/chess/model/special_moves_tests.js:283:50)
    

failed: ChessModel - Special Moves should not allow castling when the king would move through a square that is under attack
❌ Expected false to be true.
        at /tests/chess/model/special_moves_tests.js:107:51)
    

failed: ChessModel - Special Moves should work correctly when capturing on the promotion square
❌ Expected 'rook' to be 'queen'.
        at /tests/chess/model/special_moves_tests.js:250:47)
    
❌ Expected 'black' to be 'white'.
        at /tests/chess/model/special_moves_tests.js:251:48)
    
❌ Expected Object({ type: 'pawn', color: 'white', moved: false }) to be null.
        at /tests/chess/model/special_moves_tests.js:252:45)
    

failed: ChessModel - Special Moves should allow kingside castling when all conditions are met
❌ Expected undefined to be 'king'.
        at /tests/chess/model/special_moves_tests.js:23:37)
    
❌ Expected undefined to be 'rook'.
        at /tests/chess/model/special_moves_tests.js:24:37)
    
❌ Expected Object({ type: 'king', color: 'white', moved: false }) to be null.
        at /tests/chess/model/special_moves_tests.js:25:31)
    
❌ Expected Object({ type: 'rook', color: 'white', moved: false }) to be null.
        at /tests/chess/model/special_moves_tests.js:26:31)
    

failed: ChessModel - Special Moves should allow queenside castling when all conditions are met
❌ Expected undefined to be 'king'.
        at /tests/chess/model/special_moves_tests.js:44:37)
    
❌ Expected undefined to be 'rook'.
        at /tests/chess/model/special_moves_tests.js:45:37)
    
❌ Expected Object({ type: 'king', color: 'white', moved: false }) to be null.
        at /tests/chess/model/special_moves_tests.js:46:31)
    
❌ Expected Object({ type: 'rook', color: 'white', moved: false }) to be null.
        at /tests/chess/model/special_moves_tests.js:47:31)
    

failed: ChessModel - Special Moves should allow promotion to queen, rook, bishop, or knight
❌ Expected undefined to be 'queen'.
        at /tests/chess/model/special_moves_tests.js:223:47)
    

failed: ChessModel - Special Moves should make en passant available only immediately after a pawn's double move
❌ Expected null to equal Object({ row: 5, col: 4 }).
        at /tests/chess/model/special_moves_tests.js:129:35)
    
❌ Expected null to equal Object({ row: 5, col: 3 }).
        at /tests/chess/model/special_moves_tests.js:137:35)
    
❌ Expected null to equal Object({ row: 2, col: 3 }).
        at /tests/chess/model/special_moves_tests.js:141:35)
    

failed: ChessModel - Special Moves should remove the correct pawn from the board during en passant capture
❌ Expected undefined to be 'pawn'.
        at /tests/chess/model/special_moves_tests.js:166:37)
    
❌ Expected Object({ type: 'pawn', color: 'black', moved: true }) to be null.
        at /tests/chess/model/special_moves_tests.js:167:31)
    
❌ Expected Object({ type: 'pawn', color: 'white', moved: false }) to be null.
        at /tests/chess/model/special_moves_tests.js:168:31)
    

failed: ChessModel - Game State Management should return a complete and accurate game state via getGameState
❌ Expected 0 to be 2.
        at /tests/chess/model/game_state_management_tests.js:109:38)
    
❌ Expected 1 to be 2.
        at /tests/chess/model/game_state_management_tests.js:113:34)
    

failed: ChessModel - Game State Management should increment and reset halfmove clock according to the 50-move rule
❌ Expected 1 to be 2.
        at /tests/chess/model/game_state_management_tests.js:70:33)
    
❌ Expected 1 to be 3.
        at /tests/chess/model/game_state_management_tests.js:73:34)
    
❌ Expected 1 to be 4.
        at /tests/chess/model/game_state_management_tests.js:75:34)
    

failed: ChessModel - Game State Management should increment the fullmove number correctly after black's move
❌ Expected 1 to be 2.
        at /tests/chess/model/game_state_management_tests.js:91:34)
    
❌ Expected 1 to be 2.
        at /tests/chess/model/game_state_management_tests.js:94:34)
    
❌ Expected 1 to be 3.
        at /tests/chess/model/game_state_management_tests.js:97:34)
    

failed: ChessModel - Game State Management should restore the previous board state correctly using undoMove
❌ Expected 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1' not to equal 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'.
        at /tests/chess/model/game_state_management_tests.js:51:26)
    
❌ Expected false to be true.
        at /tests/chess/model/game_state_management_tests.js:54:24)
    

failed: ChessModel - Game State Management should alternate the player after each valid move
❌ Expected 'white' to be 'black'.
        at /tests/chess/model/game_state_management_tests.js:21:33)
    
❌ Expected 'white' to be 'black'.
        at /tests/chess/model/game_state_management_tests.js:25:33)
    

failed: ChessModel - Game State Management should maintain game state integrity through complex sequences of moves and undos
❌ Expected $.halfMoveClock = 1 to equal 0.
        at /tests/chess/model/game_state_management_tests.js:398:36)
    

failed: ChessModel - Game State Management should properly restore en passant opportunities when undoing a move
❌ Expected null to equal Object({ row: 5, col: 4 }).
        at /tests/chess/model/game_state_management_tests.js:199:35)
    
❌ Expected null to equal Object({ row: 2, col: 4 }).
        at /tests/chess/model/game_state_management_tests.js:202:35)
    
❌ Expected 'white' to be 'black'.
        at /tests/chess/model/game_state_management_tests.js:206:33)
    
❌ Expected null to equal Object({ row: 5, col: 4 }).
        at /tests/chess/model/game_state_management_tests.js:207:35)
    

failed: ChessModel - Game State Management should track the current player correctly
❌ Expected 'white' to be 'black'.
        at /tests/chess/model/game_state_management_tests.js:13:33)
    

failed: ChessModel - Game State Management should update the game status correctly after state changes like loadGameState or importFEN
❌ Expected 'check' to be 'stalemate'.
        at /tests/chess/model/game_state_management_tests.js:300:30)
    

failed: ChessModel - Game State Management should record all moves correctly in the move history
❌ Expected 0 to be 4.
        at /tests/chess/model/game_state_management_tests.js:37:38)
    
❌ TypeError: Cannot read properties of undefined (reading 'piece'
    at /tests/chess/model/game_state_management_tests.js:39:21)
    

failed: ChessModel - Game State Management should properly restore castling rights when undoing a move
❌ Expected true to be false.
        at /tests/chess/model/game_state_management_tests.js:180:50)
    
❌ Expected true to be false.
        at /tests/chess/model/game_state_management_tests.js:181:51)
    
❌ Expected true to be false.
        at /tests/chess/model/game_state_management_tests.js:191:50)
    

failed: ChessModel - Game State Management should generate correct FEN strings for various positions
❌ Expected 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1' to be 'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1'.
        at /tests/chess/model/game_state_management_tests.js:145:31)
    
❌ Expected 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1' to be 'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2'.
        at /tests/chess/model/game_state_management_tests.js:149:31)
    
❌ Expected 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 1 1' to be 'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2'.
        at /tests/chess/model/game_state_management_tests.js:153:32)
    

failed: ChessModel - Game State Management should return all legal moves for a piece using getValidMoves
❌ Expected 2 to be 0.
        at /tests/chess/model/game_state_management_tests.js:336:36)
    

failed: ChessModel - Rules Enforcement should prevent illegal castling under all restricted conditions
❌ Expected false to be true.
        at /tests/chess/model/rules_enforcement_tests.js:229:51)
    

failed: ChessModel - Rules Enforcement should enforce promotion requirements
❌ Expected false to be true.
        at /tests/chess/model/rules_enforcement_tests.js:140:38)
    
❌ Expected undefined to be 'queen'.
        at /tests/chess/model/rules_enforcement_tests.js:141:47)
    

failed: ChessModel - Rules Enforcement should correctly update piece properties (like "moved" status) after moves
❌ Expected false to be true.
        at /tests/chess/model/rules_enforcement_tests.js:240:37)
    

failed: ChessModel - Rules Enforcement should update game status after every move
❌ Expected 'active' to be 'check'.
        at /tests/chess/model/rules_enforcement_tests.js:165:30)
    
❌ Expected 'active' to be 'check'.
        at /tests/chess/model/rules_enforcement_tests.js:173:30)
    
❌ Expected 'active' to be 'checkmate'.
        at /tests/chess/model/rules_enforcement_tests.js:181:31)
    

failed: ChessModel - Rules Enforcement should prevent a player from moving when the game is over
❌ Expected 'check' to be 'stalemate'.
        at /tests/chess/model/rules_enforcement_tests.js:68:30)
    

failed: ChessModel - Rules Enforcement should handle discovered checks correctly (allow check if move is legal
❌ Expected false to be true.
        at /tests/chess/model/rules_enforcement_tests.js:105:21)
    
❌ Expected 'white' to be 'black'.
        at /tests/chess/model/rules_enforcement_tests.js:106:33)
    
❌ Expected false to be true.
        at /tests/chess/model/rules_enforcement_tests.js:107:42)
    
❌ Expected 'active' to be 'check'.
        at /tests/chess/model/rules_enforcement_tests.js:108:30)
    

failed: ChessModel - Rules Enforcement should enforce pawn promotion when a pawn reaches the opponent's back rank
❌ Expected false to be true.
        at /tests/chess/model/rules_enforcement_tests.js:251:68)
    
❌ Expected undefined to be 'queen'.
        at /tests/chess/model/rules_enforcement_tests.js:252:37)
    

failed: ChessModel - Rules Enforcement should enforce all draw conditions correctly (50-move, threefold, insufficient
❌ Expected true to be false.
        at /tests/chess/model/rules_enforcement_tests.js:79:68)
    
❌ Expected true to be false.
        at /tests/chess/model/rules_enforcement_tests.js:86:68)
    

failed: ChessModel - Rules Enforcement should enforce turn-based play correctly
❌ Expected 'white' to be 'black'.
        at /tests/chess/model/rules_enforcement_tests.js:35:33)
    
❌ Expected true to be false.
        at /tests/chess/model/rules_enforcement_tests.js:37:68)
    

failed: ChessModel - Rules Enforcement should only allow a player to move pieces of their own color
❌ Expected 'white' to be 'black'.
        at /tests/chess/model/rules_enforcement_tests.js:27:33)
    
❌ Expected true to be false.
        at /tests/chess/model/rules_enforcement_tests.js:29:68)
    

failed: ChessModel - Check, Checkmate, Stalemate should recognize moving the king away from check as a valid response
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:148:67)
    
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:149:68)
    
❌ Expected true to be false.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:150:42)
    

failed: ChessModel - Check, Checkmate, Stalemate should recognize blocking a check with another piece as a valid response
❌ Expected true to be false.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:139:43)
    

failed: ChessModel - Check, Checkmate, Stalemate should recognize capturing a checking piece as a valid response to check
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:126:69)
    
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:127:68)
    
❌ Expected true to be false.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:128:42)
    

failed: ChessModel - Check, Checkmate, Stalemate should identify all possible moves to get out of check
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:112:67)
    
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:113:67)
    
❌ Expected 1 to be 2.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:114:30)
    
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:117:67)
    

failed: ChessModel - Check, Checkmate, Stalemate should not allow castling through, out of, or into check
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:243:51)
    

failed: ChessModel - Check, Checkmate, Stalemate should prevent moves that leave the king in check
❌ Expected true to be false.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:23:38)
    
❌ Expected undefined to be 'rook'.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:24:51)
    

failed: ChessModel - Check, Checkmate, Stalemate should not allow a player to make moves when in checkmate
❌ Expected 'active' to be 'checkmate'.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:84:30)
    
❌ Expected true to be false.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:87:68)
    

failed: ChessModel - Check, Checkmate, Stalemate should correctly identify check from all piece types
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:194:42)
    
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:204:42)
    
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:210:42)
    
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:215:42)
    

failed: ChessModel - Check, Checkmate, Stalemate should update the game status correctly after each move
❌ Expected 'active' to be 'check'.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:71:30)
    

failed: ChessModel - Check, Checkmate, Stalemate should prevent pinned pieces (those that would expose the king to check if moved) from moving
❌ Expected 2 to be 0.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:187:30)
    

failed: ChessModel - Check, Checkmate, Stalemate should recognize stalemate when the king is not in check but has no valid moves
❌ Expected true to be false.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:44:42)
    
❌ Expected true to be false.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:45:45)
    
❌ Expected 'check' to be 'stalemate'.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:46:30)
    

failed: ChessModel - Check, Checkmate, Stalemate should change game status appropriately when entering and leaving check states
❌ Expected true to be false.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:230:43)
    
❌ Expected 'check' to be 'active'.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:231:31)
    

failed: ChessModel - Check, Checkmate, Stalemate should recognize checkmate when the king is in check and has no valid moves
❌ Expected false to be true.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:33:42)
    
❌ Expected true to be false.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:34:45)
    
❌ Expected 'active' to be 'checkmate'.
        at /tests/chess/model/check_checkmate_stalemate_tests.js:35:30)
    